// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("student")
  university    String?
  major         String?
  bio           String?
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  verifyToken   String?   @unique
  verifyTokenExpiry DateTime?
  hourlyRate    Float?
  isVerified    Boolean   @default(false)
  rating        Float     @default(0)
  totalReviews  Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  lectures      Lecture[]
  bookings      Booking[]
  expertise     Expertise[]
  availability  Availability[]
  subjects      Subject[] @relation("UserSubjects")
}

model Subject {
  id      String  @id @default(cuid())
  name    String  @unique
  users   User[]  @relation("UserSubjects")
}

model Lecture {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  duration    Int       // Duration in minutes
  subject     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tutorId     String
  tutor       User      @relation(fields: [tutorId], references: [id])
  bookings    Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  date      DateTime
  status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lectureId String
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expertise {
  id          String   @id @default(cuid())
  subject     String
  level       String   // e.g., "Beginner", "Intermediate", "Advanced"
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // Format: "HH:mm"
  endTime   String   // Format: "HH:mm"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 